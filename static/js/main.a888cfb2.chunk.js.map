{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchchange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBountry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ErrorBoundry","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAgBeA,EAdF,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GAEpB,OACC,yBAAKC,UAAU,qDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACA,4BAAKF,GACL,2BAAIC,MCUSK,EAjBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAGlB,OACC,6BACCO,ICNYK,EAPG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKX,UAAY,OACjB,2BAAOA,UAAU,mCAAmCY,KAAO,SAASC,YAAY,gBAAgBC,SAAUH,MCK7FI,G,MARA,SAACnB,GACf,OACC,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAClEvB,EAAMwB,YCkBKC,E,YAnBd,WAAazB,GAAQ,IAAD,8BACnB,4CAAMA,KACD0B,MAAQ,CACZC,UAAS,GAHS,E,+EAOFC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACP,uDAEDG,KAAK9B,MAAMwB,a,GAjBOQ,aC8CZC,E,YAxCd,aAAe,IAAD,8BACb,+CAcDC,eAAgB,SAACC,GACf,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAd1C,EAAKZ,MAAQ,CACZlB,OAAO,GACP4B,YAAa,IAJD,E,iFASb,IAAD,OACCG,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAM9B,IAAD,EACuBb,KAAKJ,MAA7BlB,EADC,EACDA,OAAQ4B,EADP,EACOA,YACTQ,EAAiBpC,EAAOqC,QAAO,SAAArC,GACrC,OAAOA,EAAOP,KAAK6C,cAAcC,SAASX,EAAYU,kBAEtD,OAAQtC,EAAOwC,OAIf,yBAAK5C,UAAY,MACjB,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAACe,EAAD,KACA,kBAAC,EAAD,CAAUzC,OAAUoC,OARnB,2C,GAzBeZ,aCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.a888cfb2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\tconst {name, email, id} = props;\n\n\treturn (\n\t\t<div className='tc bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t<div>\n\t\t<h2>{name}</h2>\n\t\t<p>{email}</p>\n\t\t</div>\n\t\t</div>\n\t\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList =({robots}) => {\n\tconst cardArray = robots.map((user,i) => {\n\t\treturn(\n\t\t<Card \n\t\tkey={i} \n\t\tid={robots[i].id} \n\t\tname={robots[i].name} \n\t\temail={robots[i].email}/>\n\t\t);\n\t})\n\treturn (\n\t\t<div>\n\t\t{cardArray}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchchange}) => {\n\treturn (\n\t\t<div className = 'pa2'>\n\t\t<input className='pa3 ba b--green bg-lightest-blue' type = 'search' placeholder='search robots' onChange={searchchange}/>\n\t\t</div>)\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '6px solid black', height:'800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBountry extends Component {\n\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError:false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\t\tthis.setState({hasError:true})\n\n\t}\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Ooops.That is not good </h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBountry;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots:[],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response =>{ return response.json();})\n\t\t.then(users => {this.setState({robots: users})});\n\t}\n\n\tonSearchChange =(event) => {\t\n\t\t this.setState({searchfield: event.target.value})\t\n\t}\n\trender() {\n\t\tconst {robots, searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter(robots => {\n\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase())\n\t\t})\n\t\treturn !robots.length?\n\t\t <h1>Loading</h1>:\n\t\t\n\t\t(\n\t\t<div className = 'tc'>\n\t\t<h1 className='f1'>RobotFriends</h1>\n\t\t<SearchBox searchchange={this.onSearchChange}/>\n\t\t<Scroll>\n\t\t<ErrorBoundry>\n\t\t<CardList robots = {filteredRobots}/>\n\t\t</ErrorBoundry>\n\t\t</Scroll>\n\t\t</div>\n\t\t)\n\t}\n\t\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}